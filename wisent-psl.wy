%languagemode psl-mode

;; The default goal.
%start goal
;; Alternate goals needed for re-parse.
%start function_def
%start variable_def

;;    - Needed by EXPANDFULL clauses
%start function_parameters
%start arguments
%start paren_expr
%start block_body

;; -----------------------------
;; Block & Parenthesis terminals
;; -----------------------------
%type  <block>       ;;syntax "\\s(\\|\\s)" matchdatatype block

%token <block>       PAREN_BLOCK "(LPAREN RPAREN)"
%token <block>       BRACE_BLOCK "(LBRACE RBRACE)"
%token <block>       BRACK_BLOCK "(LBRACK RBRACK)"

%token <open-paren>  LPAREN      "("
%token <close-paren> RPAREN      ")"
%token <open-paren>  LBRACE      "{"
%token <close-paren> RBRACE      "}"
%token <open-paren>  LBRACK      "["
%token <close-paren> RBRACK      "]"

;; ------------------
;; Operator terminals
;; ------------------
%type  <punctuation> ;;syntax "\\(\\s.\\|\\s$\\|\\s'\\)+" matchdatatype string

%token <punctuation> PLUSPLUS   "++"
%token <punctuation> PLUSEQ     "+="

%token <punctuation> MINUSMINUS "--"
%token <punctuation> MINUSEQ    "-="

%token <punctuation> PERIOD     "."
%token <punctuation> COLON      ":"
%token <punctuation> SEMICOLON	";"
%token <punctuation> COMMA      ","
%token <punctuation> ASSIGN     "="
%token <punctuation> AT         "@"

;; -----------------
;; Literal terminals
;; -----------------
%type  <string>      ;;syntax "\\s\"" matchdatatype sexp
%token <string>      STRING_LITERAL

%type  <number>      ;;syntax semantic-lex-number-expression
%token <number>      NUMBER_LITERAL

%type  <symbol>      ;;syntax "\\(\\sw\\|\\s_\\)+"
%token <symbol>      NAME

%token <symbol>      BOOLEAN_LITERAL "\\`false\\'"
%token <symbol>      BOOLEAN_LITERAL "\\`true\\'"

;; -----------------
;; Keyword terminals
;; -----------------
%type  <keyword> ;;syntax "\\(\\sw\\|\\s_\\)+" matchdatatype keyword

%keyword PLUS       "+"
%put     PLUS summary
"Built-in plus operator"

%keyword MINUS      "-"
%put     MINUS summary
"Built-in minus operator"

%keyword LT         "<"
%put     LT summary
"Built-in less-than comparison operator"

%keyword GT         ">"
%put     GT summary
"Built-in greater-than comparison operator"

%keyword EQ         "=="
%put     EQ summary
"Built-in equality comparison operator"

%keyword PRINT      "print"
%put     PRINT summary
"Built-in text output operator"

%keyword IF          "if"
%put     IF summary
"Start 'if' conditional statement"

%keyword THEN          "then"
%put     THEN summary
"Introduce 'true' branch of an 'if' statement"

%keyword ELSE          "else"
%put     ELSE summary
"Introduce 'false' branch of an 'if' statement"

%keyword FOR         "for"
%put     FOR summary
"Start a 'for' loop"

%keyword WHILE       "while"
%put     WHILE summary
"Start a 'while' loop"

%keyword LAMBDA      "lambda"
%put     LAMBDA summary
"Create anonymous function"

%keyword DEFFUN      "deffun"
%put     DEFFUN summary
"Define a new function"

%keyword DEFVAR      "defvar"
%put     DEFVAR summary
"Define a new variable"

%keyword IN      "in"
%put     IN summary
"Specify the scope of a variable or function definition"

%%

goal
  : toplevel_expr
  | compound_expr
  | simple_expr
  ;

simple_expr
  : atom
  | if_expr
  | for_expr
  | while_expr
  | funcall
  | assignment
  | pre_post_crement_expr
  ;

atom
  : NUMBER_LITERAL
  | STRING_LITERAL
  | BOOLEAN_LITERAL
  | NAME
  ;

assignment
  : lhs ASSIGN simple_expr
  | lhs PLUSEQ simple_expr
  | lhs MINUSEQ simple_expr
  ;

;; TODO: other left-hand sides
lhs
  : NAME
  ;

;; (pre|post)(in|de)crement_expr
pre_post_crement_expr
  : preincrement_expr
  | predecrement_expr
  | postincrement_expr
  | postdecrement_expr
  ;

;; '++' NAME
preincrement_expr
  : PLUSPLUS NAME
  ;

;; '--' NAME
predecrement_expr
  : MINUSMINUS unary_expr
  ;

;; NAME '++'
postincrement_expr
  : postfix_expression PLUSPLUS
  ;

;; NAME '--'
postdecrement_expr
  : postfix_expression MINUSMINUS
  ;

compound_expr
  : simple_expr_list SEMICOLON
  ;

;; simple_expr (';' simple_expr)*
simple_expr_list
  : simple_expr
  | simple_expr_list SEMICOLON simple_expr
  ;

block
  : BRACE_BLOCK
    (EXPANDFULL $1 block_body)
  ;

block_body
  : LBRACE
    ()
  | compound_expr RBRACE
  | simple_expr RBRACE
  ;

builtin_op
  : LT | GT | PLUS | MINUS | EQ | PRINT
  ;

funcall
  ;; : simple_expr argument_list
  ;;   (CODE-TAG "funcall" $1)
  : builtin_op PAREN_BLOCK
    (CODE-TAG (format "op: %s" $1) nil)
  | NAME PAREN_BLOCK
    (CODE-TAG (format "funcall: %s" $1) nil)
  ;

argument_list
  : PAREN_BLOCK
  ;

arguments
  : LPAREN
    ()
  | RPAREN
    ()
  | simple_expr COMMA
  | simple_expr RPAREN
  ;

toplevel_expr
  : function_def
  | variable_def
  ;

top_or_block
  : toplevel_expr
  | block
  ;

function_def
  : DEFFUN NAME function_parameter_list simple_expr IN toplevel_expr
    (FUNCTION-TAG $2 nil $3)
  ;

function_parameter_list
  : PAREN_BLOCK
    (EXPANDFULL $1 function_parameters)
  ;

function_parameters
  : LPAREN
    ()
  | RPAREN
    ()
  | NAME COMMA
    (VARIABLE-TAG $1 nil nil)
  | NAME RPAREN
    (VARIABLE-TAG $1 nil nil)
  ;

variable_def
  : DEFVAR NAME ASSIGN simple_expr IN top_or_block
    (VARIABLE-TAG $2 "toplevel" nil)
  ;

;; [',']
comma_opt
  : ;;EMPTY
  | COMMA
  ;

;; [';']
semicolon_opt
  : ;;EMPTY
  | SEMICOLON
  ;

;;;;;;; Control flow

if_expr
  : IF if_cond THEN simple_expr ELSE simple_expr
    (CODE-TAG $1 nil)
  ;

;; simple_expr | paren_expr
if_cond
  : simple_expr
  | PAREN_BLOCK
    (EXPANDFULL $1 paren_expr)
  ;

;; '(' simple_expr ')'
paren_expr
  : LPAREN simple_expr RPAREN
  ;

for_expr
  : FOR for_cond block
    (CODE-TAG $1 nil)
  ;

for_cond
  : LPAREN simple_expr SEMICOLON simple_expr SEMICOLON simple_expr RPAREN
  ;

while_expr
  : WHILE LPAREN simple_expr RPAREN block
    (CODE-TAG $1 nil)
  ;

%%

(define-lex psl-lexer
  "Lexer for `psl-mode'"
  ;;std stuff
  semantic-lex-ignore-whitespace
  semantic-lex-ignore-newline
  semantic-lex-ignore-comments

  ;;stuff generated from the wy file(one for each "type" declaration)
  wisent-psl-wy--<number>-regexp-analyzer
  wisent-psl-wy--<string>-sexp-analyzer

  wisent-psl-wy--<keyword>-keyword-analyzer

  wisent-psl-wy--<symbol>-regexp-analyzer
  wisent-psl-wy--<punctuation>-string-analyzer
  wisent-psl-wy--<block>-block-analyzer

  ;;;;more std stuff
  semantic-lex-default-action
  )
